generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?      @map("email_verified")
  password      String
  image         String?
  role          Role           @default(USER)
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  accounts      Account[]
  conversations Conversation[]
  sessions      Session[]
  activities    UserActivity[]
  scripts       Script[]
  strategies    Strategy[]
  strategyFolders StrategyFolder[]
  sharedByStrategies SharedStrategy[] @relation("SharedByUser")
  sharedWithStrategies SharedStrategy[] @relation("SharedWithUser")
  agentConversations AgentConversation[]
  generatedPineCode GeneratedPineCode[]
  subscriptions Subscription[]
  payments Payment[]
  invoices Invoice[]
  usageMetrics UsageMetric[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model LLMModel {
  id              String         @id @default(cuid())
  name            String         @unique
  provider        String
  modelId         String
  displayName     String
  description     String?
  isActive        Boolean        @default(true)
  isDefault       Boolean        @default(false)
  maxTokens       Int?
  costPer1kTokens Float?
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  conversations   Conversation[]

  @@map("llm_models")
}

model Conversation {
  id        String    @id @default(cuid())
  userId    String    @map("user_id")
  modelId   String    @map("model_id")
  title     String?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  model     LLMModel  @relation(fields: [modelId], references: [id])
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@map("conversations")
}

model Message {
  id             String       @id @default(cuid())
  conversationId String       @map("conversation_id")
  role           MessageRole
  content        String
  createdAt      DateTime     @default(now()) @map("created_at")
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model AdminUser {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  isAdmin       Boolean   @default(true) // Always true - single admin model
  passwordHash  String    @map("password_hash")
  mfaEnabled    Boolean   @default(false) @map("mfa_enabled")
  mfaSecret     String?   @map("mfa_secret")
  isActive      Boolean   @default(true) @map("is_active")
  lastLogin     DateTime? @map("last_login")
  lastLoginIP   String?   @map("last_login_ip")
  sessionId     String?   @map("session_id")
  loginAttempts Int       @default(0) @map("login_attempts")
  lockedUntil   DateTime? @map("locked_until")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  auditLogs     AuditLog[]

  // Ensure only one admin account exists
  @@unique([isAdmin], name: "single_admin_constraint")
  @@map("admin_users")
}

model AuditLog {
  id         String    @id @default(cuid())
  adminId    String    @map("admin_id")
  action     String
  resource   String
  resourceId String?   @map("resource_id")
  details    Json?
  ipAddress  String    @map("ip_address")
  userAgent  String    @map("user_agent")
  timestamp  DateTime  @default(now())
  admin      AdminUser @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@index([adminId])
  @@index([timestamp])
  @@index([action])
  @@index([resource])
  @@map("audit_logs")
}

model SystemMetrics {
  id            String   @id @default(cuid())
  timestamp     DateTime @default(now())
  cpuUsage      Float    @map("cpu_usage")
  memoryUsage   Float    @map("memory_usage")
  diskUsage     Float    @map("disk_usage")
  activeUsers   Int      @map("active_users")
  apiRequests   Int      @map("api_requests")
  errorRate     Float    @map("error_rate")
  responseTime  Float    @map("response_time")
  dbConnections Int      @map("db_connections")
  queueSize     Int      @map("queue_size")

  @@index([timestamp])
  @@map("system_metrics")
}

enum Role {
  USER
  ADMIN
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

model AdminSettings {
  id                String   @id @default(cuid())
  key               String   @unique
  value             Json
  description       String?
  category          String   @default("general")
  isSystemSetting   Boolean  @default(false) @map("is_system_setting")
  updatedAt         DateTime @updatedAt @map("updated_at")
  updatedBy         String   @map("updated_by") // Admin user ID

  @@index([category])
  @@map("admin_settings")
}

model UserActivity {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  action      String
  resource    String?
  details     Json?
  ipAddress   String   @map("ip_address")
  userAgent   String   @map("user_agent")
  timestamp   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([timestamp])
  @@index([action])
  @@map("user_activity")
}

model SecurityEvent {
  id          String   @id @default(cuid())
  type        String   // "failed_login", "suspicious_activity", "blocked_ip", etc.
  severity    String   // "low", "medium", "high", "critical"
  description String
  details     Json?
  ipAddress   String?  @map("ip_address")
  userAgent   String?  @map("user_agent")
  userId      String?  @map("user_id")
  resolved    Boolean  @default(false)
  resolvedAt  DateTime? @map("resolved_at")
  resolvedBy  String?  @map("resolved_by") // Admin user ID
  timestamp   DateTime @default(now())

  @@index([type])
  @@index([severity])
  @@index([timestamp])
  @@index([resolved])
  @@map("security_events")
}

model Script {
  id          String      @id @default(cuid())
  userId      String      @map("user_id")
  title       String
  description String?
  code        String?     @map("pine_code")
  type        ScriptType  @default(INDICATOR)
  status      ScriptStatus @default(DRAFT)
  isPublic    Boolean     @default(false) @map("is_public")
  tags        String?     // JSON array of tags
  version     String      @default("1.0")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([status])
  @@index([isPublic])
  @@index([createdAt])
  @@map("scripts")
}

enum ScriptType {
  INDICATOR
  STRATEGY
  LIBRARY
}

enum ScriptStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Strategy {
  id              String            @id @default(cuid())
  userId          String            @map("user_id")
  name            String
  description     String?
  category        String?
  nodes           Json              // Array of StrategyNode objects
  connections     Json              // Array of NodeConnection objects
  pineScriptCode  String?           @map("pine_script_code")
  isPublic        Boolean           @default(false) @map("is_public")
  tags            String?           // JSON array of tags
  version         Int               @default(1)
  folderId        String?           @map("folder_id")
  templateId      String?           @map("template_id")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  folder          StrategyFolder?   @relation(fields: [folderId], references: [id])
  template        StrategyTemplate? @relation(fields: [templateId], references: [id])
  backtestResults BacktestResult[]
  sharedStrategies SharedStrategy[]
  strategyVersions StrategyVersion[]

  @@index([userId])
  @@index([category])
  @@index([isPublic])
  @@index([createdAt])
  @@index([folderId])
  @@index([templateId])
  @@index([userId, category])
  @@index([userId, isPublic])
  @@index([userId, createdAt])
  @@index([userId, folderId])
  @@map("strategies")
}

model StrategyVersion {
  id              String   @id @default(cuid())
  strategyId      String   @map("strategy_id")
  version         Int
  name            String
  description     String?
  nodes           Json
  connections     Json
  pineScriptCode  String?  @map("pine_script_code")
  changeLog       String?  @map("change_log")
  createdAt       DateTime @default(now()) @map("created_at")
  strategy        Strategy @relation(fields: [strategyId], references: [id], onDelete: Cascade)

  @@unique([strategyId, version])
  @@index([strategyId])
  @@index([createdAt])
  @@map("strategy_versions")
}

model StrategyFolder {
  id          String     @id @default(cuid())
  userId      String     @map("user_id")
  name        String
  description String?
  parentId    String?    @map("parent_id")
  color       String?    // Hex color for folder
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent      StrategyFolder? @relation("FolderHierarchy", fields: [parentId], references: [id])
  children    StrategyFolder[] @relation("FolderHierarchy")
  strategies  Strategy[]

  @@index([userId])
  @@index([parentId])
  @@index([userId, parentId])
  @@map("strategy_folders")
}

model StrategyTemplate {
  id          String     @id @default(cuid())
  name        String
  description String
  category    String
  nodes       Json
  connections Json
  tags        String?    // JSON array of tags
  difficulty  String     @default("beginner") // beginner, intermediate, advanced
  isOfficial  Boolean    @default(false) @map("is_official")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  strategies  Strategy[]

  @@index([category])
  @@index([difficulty])
  @@index([isOfficial])
  @@map("strategy_templates")
}

model BacktestResult {
  id                 String   @id @default(cuid())
  strategyId         String   @map("strategy_id")
  config             Json     // BacktestConfig object
  results            Json     // Raw backtest results
  performanceMetrics Json     @map("performance_metrics") // Calculated metrics
  status             String   @default("pending") // pending, running, completed, failed
  errorMessage       String?  @map("error_message")
  startedAt          DateTime @default(now()) @map("started_at")
  completedAt        DateTime? @map("completed_at")
  strategy           Strategy @relation(fields: [strategyId], references: [id], onDelete: Cascade)

  @@index([strategyId])
  @@index([status])
  @@index([startedAt])
  @@index([strategyId, status])
  @@index([strategyId, startedAt])
  @@map("backtest_results")
}

model SharedStrategy {
  id          String      @id @default(cuid())
  strategyId  String      @map("strategy_id")
  sharedBy    String      @map("shared_by")
  sharedWith  String?     @map("shared_with") // null for public sharing
  permission  Permission  @default(READ)
  expiresAt   DateTime?   @map("expires_at")
  createdAt   DateTime    @default(now()) @map("created_at")
  strategy    Strategy    @relation(fields: [strategyId], references: [id], onDelete: Cascade)
  sharedByUser User       @relation("SharedByUser", fields: [sharedBy], references: [id], onDelete: Cascade)
  sharedWithUser User?    @relation("SharedWithUser", fields: [sharedWith], references: [id], onDelete: Cascade)

  @@unique([strategyId, sharedWith])
  @@index([strategyId])
  @@index([sharedBy])
  @@index([sharedWith])
  @@map("shared_strategies")
}

enum Permission {
  READ
  WRITE
  ADMIN
}

// Single admin model - no roles or permissions needed
// The single admin has unrestricted access to everything

// Agent Conversation Schema Extensions

// Agent conversation model
model AgentConversation {
  id              String            @id @default(cuid())
  userId          String            @map("user_id")
  sessionId       String            @unique @map("session_id")
  agentType       String            @default("pinescript") @map("agent_type")
  context         Json
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages        AgentMessage[]
  generatedCode   GeneratedPineCode[]

  @@index([userId])
  @@index([sessionId])
  @@index([agentType])
  @@index([createdAt])
  @@index([userId, agentType])
  @@index([userId, createdAt])
  @@map("agent_conversations")
}

// Agent message model
model AgentMessage {
  id              String            @id @default(cuid())
  conversationId  String            @map("conversation_id")
  role            AgentMessageRole
  content         String
  metadata        Json?
  createdAt       DateTime          @default(now()) @map("created_at")
  conversation    AgentConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([role])
  @@index([createdAt])
  @@index([conversationId, createdAt])
  @@map("agent_messages")
}

// Generated Pine Script code model
model GeneratedPineCode {
  id              String            @id @default(cuid())
  conversationId  String            @map("conversation_id")
  userId          String            @map("user_id")
  code            String            @map("pine_script_code")
  version         Int               @default(1)
  validationStatus String           @default("pending") @map("validation_status")
  metadata        Json?
  createdAt       DateTime          @default(now()) @map("created_at")
  conversation    AgentConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([userId])
  @@index([validationStatus])
  @@index([createdAt])
  @@index([conversationId, version])
  @@index([userId, createdAt])
  @@map("generated_pine_code")
}

// Agent message role enum
enum AgentMessageRole {
  USER
  AGENT
  SYSTEM
}

// Encrypted API Keys Storage
model ApiKey {
  id          String   @id @default(cuid())
  provider    String   @unique // 'openai', 'anthropic', 'google', 'deepseek', 'ollama'
  keyName     String   @map("key_name") // Display name for the key
  encryptedKey String  @map("encrypted_key") // AES-256 encrypted API key
  isActive    Boolean  @default(true) @map("is_active")
  lastUsed    DateTime? @map("last_used")
  usageCount  Int      @default(0) @map("usage_count")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  createdBy   String   @map("created_by") // Admin user ID who added the key

  @@index([provider])
  @@index([isActive])
  @@index([createdAt])
  @@map("api_keys")
}

// Payment System Models

// Subscription Plans
model SubscriptionPlan {
  id            String         @id @default(cuid())
  name          String         @unique // 'free', 'pro', 'enterprise'
  displayName   String         @map("display_name")
  description   String
  monthlyPrice  Decimal        @map("monthly_price") @db.Decimal(10,2)
  annualPrice   Decimal        @map("annual_price") @db.Decimal(10,2)
  currency      String         @default("USD") @db.VarChar(3)
  features      Json           // Array of PlanFeature objects
  limits        Json           // PlanLimits object
  isPopular     Boolean        @default(false) @map("is_popular")
  trialDays     Int            @default(0) @map("trial_days")
  payuPlanId    String?        @map("payu_plan_id") @db.VarChar(100)
  isActive      Boolean        @default(true) @map("is_active")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  subscriptions Subscription[]

  @@index([name])
  @@index([isActive])
  @@map("subscription_plans")
}

// User Subscriptions
model Subscription {
  id                   String           @id @default(cuid())
  userId               String           @map("user_id")
  planId               String           @map("plan_id")
  status               SubscriptionStatus @default(ACTIVE)
  currentPeriodStart   DateTime         @map("current_period_start")
  currentPeriodEnd     DateTime         @map("current_period_end")
  cancelAtPeriodEnd    Boolean          @default(false) @map("cancel_at_period_end")
  trialEnd             DateTime?        @map("trial_end")
  payuSubscriptionId   String?          @map("payu_subscription_id")
  createdAt            DateTime         @default(now()) @map("created_at")
  updatedAt            DateTime         @updatedAt @map("updated_at")
  user                 User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan                 SubscriptionPlan @relation(fields: [planId], references: [id])
  payments             Payment[]
  usageMetrics         UsageMetric[]

  @@unique([userId, status], name: "unique_active_subscription")
  @@index([userId])
  @@index([status])
  @@index([planId])
  @@index([currentPeriodEnd])
  @@map("subscriptions")
}

// Payments
model Payment {
  id                  String        @id @default(cuid())
  userId              String        @map("user_id")
  subscriptionId      String?       @map("subscription_id")
  payuTransactionId   String?       @unique @map("payu_transaction_id") @db.VarChar(100)
  referenceCode       String        @unique @map("reference_code") @db.VarChar(100)
  amount              Decimal       @db.Decimal(10,2)
  currency            String        @db.VarChar(3)
  status              PaymentStatus @default(PENDING)
  paymentMethod       String?       @map("payment_method") @db.VarChar(50)
  description         String?
  customerInfo        Json?         @map("customer_info")
  payuResponse        Json?         @map("payu_response")
  createdAt           DateTime      @default(now()) @map("created_at")
  updatedAt           DateTime      @updatedAt @map("updated_at")
  user                User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription        Subscription? @relation(fields: [subscriptionId], references: [id])
  invoices            Invoice[]

  @@index([userId])
  @@index([status])
  @@index([payuTransactionId])
  @@index([referenceCode])
  @@index([subscriptionId])
  @@index([createdAt])
  @@map("payments")
}

// Invoices
model Invoice {
  id             String        @id @default(cuid())
  invoiceNumber  String        @unique @map("invoice_number") @db.VarChar(50)
  userId         String        @map("user_id")
  paymentId      String        @map("payment_id")
  amount         Decimal       @db.Decimal(10,2)
  tax            Decimal       @default(0) @db.Decimal(10,2)
  total          Decimal       @db.Decimal(10,2)
  currency       String        @db.VarChar(3)
  status         InvoiceStatus @default(DRAFT)
  dueDate        DateTime?     @map("due_date")
  items          Json          // Array of InvoiceItem objects
  billingAddress Json?         @map("billing_address")
  pdfPath        String?       @map("pdf_path")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  payment        Payment       @relation(fields: [paymentId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([invoiceNumber])
  @@index([paymentId])
  @@index([createdAt])
  @@map("invoices")
}

// Webhook Events
model WebhookEvent {
  id                String    @id @default(cuid())
  eventType         String    @map("event_type") @db.VarChar(50)
  payuTransactionId String?   @map("payu_transaction_id") @db.VarChar(100)
  payload           Json
  signature         String?   @db.VarChar(255)
  processed         Boolean   @default(false)
  processingResult  Json?     @map("processing_result")
  createdAt         DateTime  @default(now()) @map("created_at")
  processedAt       DateTime? @map("processed_at")

  @@index([processed])
  @@index([eventType])
  @@index([payuTransactionId])
  @@index([createdAt])
  @@map("webhook_events")
}

// Usage Metrics
model UsageMetric {
  id             String       @id @default(cuid())
  userId         String       @map("user_id")
  subscriptionId String       @map("subscription_id")
  metricType     String       @map("metric_type")
  metricValue    Int          @default(1) @map("metric_value")
  periodStart    DateTime     @map("period_start")
  periodEnd      DateTime     @map("period_end")
  createdAt      DateTime     @default(now()) @map("created_at")
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@unique([userId, metricType, periodStart, periodEnd])
  @@index([userId])
  @@index([subscriptionId])
  @@index([metricType])
  @@index([periodStart, periodEnd])
  @@map("usage_metrics")
}

// Payment System Enums
enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
  TRIALING
  INCOMPLETE
  INCOMPLETE_EXPIRED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  APPROVED
  DECLINED
  ERROR
  EXPIRED
  REFUNDED
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELED
}
