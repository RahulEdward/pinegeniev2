generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?      @map("email_verified")
  password      String
  image         String?
  role          Role           @default(USER)
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  accounts      Account[]
  conversations Conversation[]
  sessions      Session[]
  activities    UserActivity[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model LLMModel {
  id              String         @id @default(cuid())
  name            String         @unique
  provider        String
  modelId         String
  displayName     String
  description     String?
  isActive        Boolean        @default(true)
  isDefault       Boolean        @default(false)
  maxTokens       Int?
  costPer1kTokens Float?
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  conversations   Conversation[]

  @@map("llm_models")
}

model Conversation {
  id        String    @id @default(cuid())
  userId    String    @map("user_id")
  modelId   String    @map("model_id")
  title     String?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  model     LLMModel  @relation(fields: [modelId], references: [id])
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@map("conversations")
}

model Message {
  id             String       @id @default(cuid())
  conversationId String       @map("conversation_id")
  role           MessageRole
  content        String
  createdAt      DateTime     @default(now()) @map("created_at")
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model AdminUser {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  isAdmin       Boolean   @default(true) // Always true - single admin model
  passwordHash  String    @map("password_hash")
  mfaEnabled    Boolean   @default(false) @map("mfa_enabled")
  mfaSecret     String?   @map("mfa_secret")
  isActive      Boolean   @default(true) @map("is_active")
  lastLogin     DateTime? @map("last_login")
  lastLoginIP   String?   @map("last_login_ip")
  sessionId     String?   @map("session_id")
  loginAttempts Int       @default(0) @map("login_attempts")
  lockedUntil   DateTime? @map("locked_until")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  auditLogs     AuditLog[]

  // Ensure only one admin account exists
  @@unique([isAdmin], name: "single_admin_constraint")
  @@map("admin_users")
}

model AuditLog {
  id         String    @id @default(cuid())
  adminId    String    @map("admin_id")
  action     String
  resource   String
  resourceId String?   @map("resource_id")
  details    Json?
  ipAddress  String    @map("ip_address")
  userAgent  String    @map("user_agent")
  timestamp  DateTime  @default(now())
  admin      AdminUser @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@index([adminId])
  @@index([timestamp])
  @@index([action])
  @@index([resource])
  @@map("audit_logs")
}

model SystemMetrics {
  id            String   @id @default(cuid())
  timestamp     DateTime @default(now())
  cpuUsage      Float    @map("cpu_usage")
  memoryUsage   Float    @map("memory_usage")
  diskUsage     Float    @map("disk_usage")
  activeUsers   Int      @map("active_users")
  apiRequests   Int      @map("api_requests")
  errorRate     Float    @map("error_rate")
  responseTime  Float    @map("response_time")
  dbConnections Int      @map("db_connections")
  queueSize     Int      @map("queue_size")

  @@index([timestamp])
  @@map("system_metrics")
}

enum Role {
  USER
  ADMIN
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

model AdminSettings {
  id                String   @id @default(cuid())
  key               String   @unique
  value             Json
  description       String?
  category          String   @default("general")
  isSystemSetting   Boolean  @default(false) @map("is_system_setting")
  updatedAt         DateTime @updatedAt @map("updated_at")
  updatedBy         String   @map("updated_by") // Admin user ID

  @@index([category])
  @@map("admin_settings")
}

model UserActivity {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  action      String
  resource    String?
  details     Json?
  ipAddress   String   @map("ip_address")
  userAgent   String   @map("user_agent")
  timestamp   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([timestamp])
  @@index([action])
  @@map("user_activity")
}

model SecurityEvent {
  id          String   @id @default(cuid())
  type        String   // "failed_login", "suspicious_activity", "blocked_ip", etc.
  severity    String   // "low", "medium", "high", "critical"
  description String
  details     Json?
  ipAddress   String?  @map("ip_address")
  userAgent   String?  @map("user_agent")
  userId      String?  @map("user_id")
  resolved    Boolean  @default(false)
  resolvedAt  DateTime? @map("resolved_at")
  resolvedBy  String?  @map("resolved_by") // Admin user ID
  timestamp   DateTime @default(now())

  @@index([type])
  @@index([severity])
  @@index([timestamp])
  @@index([resolved])
  @@map("security_events")
}

// Single admin model - no roles or permissions needed
// The single admin has unrestricted access to everything
