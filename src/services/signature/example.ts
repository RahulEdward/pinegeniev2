/**
 * Pine Genie Signature Service - Usage Example
 * 
 * This file demonstrates how to use the signature service to add
 * professional signatures to generated Pine Script code.
 */

import { SignatureService } from './SignatureService';
import { GenerationContext, SignatureType } from '../../types/signature';

/**
 * Example usage of the signature service
 */
async function demonstrateSignatureService() {
  const signatureService = new SignatureService();

  // Example Pine Script code
  const pineScriptCode = `//@version=6
strategy("My Trading Strategy", overlay=true)

// Simple moving average crossover
sma20 = ta.sma(close, 20)
sma50 = ta.sma(close, 50)

// Entry conditions
longCondition = ta.crossover(sma20, sma50)
shortCondition = ta.crossunder(sma20, sma50)

// Execute trades
if (longCondition)
    strategy.entry("Long", strategy.long)

if (shortCondition)
    strategy.entry("Short", strategy.short)

// Plot indicators
plot(sma20, color=color.blue, title="SMA 20")
plot(sma50, color=color.red, title="SMA 50")`;

  console.log('=== SIGNATURE SERVICE DEMONSTRATION ===\n');

  // Example 1: Template-generated code
  console.log('1. Template-generated code signature:');
  console.log('=====================================');
  
  const templateContext: GenerationContext = {
    type: 'template',
    templateId: 'sma-crossover',
    strategyName: 'SMA Crossover Strategy',
    timestamp: new Date(),
    version: '1.0',
    userId: 'user123'
  };

  const templateResult = await signatureService.addSignature(pineScriptCode, templateContext);
  console.log(templateResult);
  console.log('\n');

  // Example 2: Visual builder-generated code
  console.log('2. Visual builder-generated code signature:');
  console.log('==========================================');
  
  const builderContext: GenerationContext = {
    type: 'builder',
    strategyName: 'Visual Builder Strategy',
    timestamp: new Date(),
    version: '1.0',
    userId: 'user456',
    metadata: {
      nodeCount: 8,
      nodeTypes: ['data-source', 'sma', 'crossover', 'buy-order', 'sell-order'],
      edgeCount: 12
    }
  };

  const builderResult = await signatureService.addSignature(pineScriptCode, builderContext);
  console.log(builderResult);
  console.log('\n');

  // Example 3: AI-generated code
  console.log('3. AI-generated code signature:');
  console.log('===============================');
  
  const aiContext: GenerationContext = {
    type: 'ai-chat',
    strategyName: 'AI Generated Strategy',
    timestamp: new Date(),
    version: '1.0',
    userId: 'user789',
    metadata: {
      prompt: 'Create a simple moving average crossover strategy with 20 and 50 period SMAs',
      promptLength: 75
    }
  };

  const aiResult = await signatureService.addSignature(pineScriptCode, aiContext);
  console.log(aiResult);
  console.log('\n');

  // Example 4: Signature validation
  console.log('4. Signature validation example:');
  console.log('================================');
  
  const validSignature = '// Generated by Pine Genie\n// Professional Pine Script Generator';
  const invalidSignature = '// Generated by Pine Genie\nstrategy("invalid")';
  
  const validResult = signatureService.validateSignature(validSignature);
  const invalidResult = signatureService.validateSignature(invalidSignature);
  
  console.log('Valid signature result:', validResult);
  console.log('Invalid signature result:', invalidResult);
  console.log('\n');

  // Example 5: Template retrieval
  console.log('5. Template retrieval example:');
  console.log('==============================');
  
  const templateTemplate = await signatureService.getSignatureTemplate(SignatureType.TEMPLATE);
  const builderTemplate = await signatureService.getSignatureTemplate(SignatureType.BUILDER);
  const aiTemplate = await signatureService.getSignatureTemplate(SignatureType.AI_CHAT);
  
  console.log('Template signature template:', templateTemplate.name);
  console.log('Builder signature template:', builderTemplate.name);
  console.log('AI signature template:', aiTemplate.name);
}

// Export the demonstration function for use in other files
export { demonstrateSignatureService };

// Run the demonstration if this file is executed directly
if (require.main === module) {
  demonstrateSignatureService().catch(console.error);
}