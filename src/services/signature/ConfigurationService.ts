/**
 * Pine Genie Configuration Service
 * 
 * Manages signature templates, user preferences, and system configuration.
 * Provides access to default templates and system defaults.
 */

import {
  ConfigurationService as IConfigurationService,
  SignatureTemplate,
  SignaturePreferences,
  SignatureDefaults,
  SignatureType,
  SignaturePosition
} from '../../types/signature';
import { DEFAULT_TEMPLATES, DEFAULT_SIGNATURE_DEFAULTS } from './templates';

export class ConfigurationService implements IConfigurationService {
  
  /**
   * Retrieves a signature template by type
   * 
   * @param type - The type of signature template to retrieve
   * @returns Promise resolving to the signature template
   */
  async getSignatureTemplate(type: SignatureType): Promise<SignatureTemplate> {
    try {
      // For now, return default templates
      // In later tasks, this will check database for custom templates first
      const template = DEFAULT_TEMPLATES[type];
      
      if (!template) {
        throw new Error(`Template not found for type: ${type}`);
      }

      return template;
    } catch (error) {
      console.error(`Error retrieving template for type ${type}:`, error);
      
      // Return a basic fallback template
      return this.getFallbackTemplate(type);
    }
  }

  /**
   * Retrieves user signature preferences
   * 
   * @param userId - The ID of the user
   * @returns Promise resolving to user preferences
   */
  async getUserPreferences(userId: string): Promise<SignaturePreferences> {
    try {
      // TODO: Implement database lookup in later tasks
      // For now, return default preferences
      return this.getDefaultPreferences();
    } catch (error) {
      console.error(`Error retrieving preferences for user ${userId}:`, error);
      
      // Return default preferences on error
      return this.getDefaultPreferences();
    }
  }

  /**
   * Updates a signature template
   * 
   * @param template - The template to update
   */
  async updateSignatureTemplate(template: SignatureTemplate): Promise<void> {
    try {
      // TODO: Implement database persistence in later tasks
      // For now, this is a placeholder
      console.log('Updating template:', template.id);
    } catch (error) {
      console.error('Error updating template:', error);
      throw error;
    }
  }

  /**
   * Gets system default configuration
   * 
   * @returns System defaults
   */
  getSystemDefaults(): SignatureDefaults {
    return DEFAULT_SIGNATURE_DEFAULTS;
  }

  /**
   * Gets default user preferences
   * 
   * @returns Default signature preferences
   */
  private getDefaultPreferences(): SignaturePreferences {
    const defaults = this.getSystemDefaults();
    
    return {
      enabled: defaults.enabled,
      verbosityLevel: defaults.defaultVerbosity,
      includeTimestamp: true,
      includeMetadata: true,
      position: defaults.defaultPosition
    };
  }

  /**
   * Creates a fallback template when the requested template is not found
   * 
   * @param type - The signature type for the fallback
   * @returns A basic fallback template
   */
  private getFallbackTemplate(type: SignatureType): SignatureTemplate {
    return {
      id: `fallback-${type}`,
      name: `Fallback ${type} Template`,
      type,
      template: `// Generated by Pine Genie - https://pinegenie.com\n// {{timestamp}}\n// Type: {{generationType}}`,
      variables: [
        { name: 'timestamp', type: 'datetime', required: true },
        { name: 'generationType', type: 'string', required: true }
      ],
      position: SignaturePosition.TOP,
      enabled: true
    };
  }
}