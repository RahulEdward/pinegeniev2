/**
 * Pine Genie Signature Error Handler
 * 
 * Handles errors in the signature system and provides fallback signatures
 * to ensure code generation never fails due to signature issues.
 */

import { SignatureError, GenerationContext } from '../../types/signature';

export class SignatureErrorHandler {
  /**
   * Handles signature system errors and provides appropriate fallbacks
   * 
   * @param error - The error that occurred
   * @param context - Context information including original code
   * @returns Fallback signature or original code
   */
  static handle(error: SignatureError, context: any): string {
    console.warn('Signature system error:', error);

    switch (error) {
      case SignatureError.TEMPLATE_NOT_FOUND:
        return this.getDefaultSignature(context);
      
      case SignatureError.VARIABLE_RESOLUTION_FAILED:
        return this.getMinimalSignature(context);
      
      case SignatureError.INJECTION_FAILED:
        console.warn('Signature injection failed, returning original code');
        return context.originalCode || '';
      
      case SignatureError.VALIDATION_FAILED:
        return this.getMinimalSignature(context);
      
      case SignatureError.USER_PREFERENCES_ERROR:
        return this.getDefaultSignature(context);
      
      default:
        return this.getFallbackSignature();
    }
  }

  /**
   * Generates a default signature with basic information
   * 
   * @param context - Context information for signature generation
   * @returns Default signature string
   */
  private static getDefaultSignature(context: any): string {
    const timestamp = new Date().toISOString();
    const generationContext = context.context as GenerationContext;
    
    if (generationContext) {
      const strategyName = generationContext.strategyName || 'Generated Strategy';
      return `// Generated by Pine Genie - https://pinegenie.com\n// Strategy: ${strategyName}\n// ${timestamp}\n\n${context.originalCode || ''}`;
    }
    
    return `// Generated by Pine Genie - https://pinegenie.com\n// ${timestamp}\n\n${context.originalCode || ''}`;
  }

  /**
   * Generates a minimal signature with just basic attribution
   * 
   * @param context - Context information for signature generation
   * @returns Minimal signature string
   */
  private static getMinimalSignature(context: any): string {
    return `// Pine Genie Generated Script\n\n${context.originalCode || ''}`;
  }

  /**
   * Generates the most basic fallback signature
   * 
   * @returns Basic fallback signature
   */
  private static getFallbackSignature(): string {
    return `// Pine Genie - Professional Pine Script Generator\n`;
  }

  /**
   * Logs error details for debugging and monitoring
   * 
   * @param error - The error that occurred
   * @param context - Additional context information
   */
  static logError(error: SignatureError, context: any): void {
    const errorDetails = {
      error,
      timestamp: new Date().toISOString(),
      context: {
        hasOriginalCode: !!context.originalCode,
        hasGenerationContext: !!context.context,
        contextType: context.context?.type || 'unknown'
      }
    };

    console.error('Signature system error details:', errorDetails);

    // TODO: In production, send this to monitoring/logging service
    // Example: sendToMonitoring('signature_error', errorDetails);
  }

  /**
   * Determines if an error is recoverable
   * 
   * @param error - The error to check
   * @returns True if the error is recoverable
   */
  static isRecoverable(error: SignatureError): boolean {
    switch (error) {
      case SignatureError.TEMPLATE_NOT_FOUND:
      case SignatureError.VARIABLE_RESOLUTION_FAILED:
      case SignatureError.USER_PREFERENCES_ERROR:
        return true;
      
      case SignatureError.INJECTION_FAILED:
      case SignatureError.VALIDATION_FAILED:
        return false;
      
      default:
        return false;
    }
  }

  /**
   * Gets a user-friendly error message for display
   * 
   * @param error - The error to get message for
   * @returns User-friendly error message
   */
  static getUserMessage(error: SignatureError): string {
    switch (error) {
      case SignatureError.TEMPLATE_NOT_FOUND:
        return 'Signature template not found. Using default signature.';
      
      case SignatureError.VARIABLE_RESOLUTION_FAILED:
        return 'Some signature variables could not be resolved. Using simplified signature.';
      
      case SignatureError.INJECTION_FAILED:
        return 'Could not add signature to code. Code generated without signature.';
      
      case SignatureError.VALIDATION_FAILED:
        return 'Signature validation failed. Using basic signature.';
      
      case SignatureError.USER_PREFERENCES_ERROR:
        return 'Could not load signature preferences. Using default settings.';
      
      default:
        return 'An error occurred with the signature system. Using fallback signature.';
    }
  }
}