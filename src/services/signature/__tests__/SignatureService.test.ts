/**
 * Pine Genie Signature Service - Unit Tests
 * 
 * Tests for the core signature service infrastructure to ensure
 * basic functionality works correctly.
 */

import { SignatureService } from '../SignatureService';
import { SignatureType, GenerationContext } from '../../../types/signature';

describe('SignatureService', () => {
  let signatureService: SignatureService;

  beforeEach(() => {
    signatureService = new SignatureService();
  });

  describe('addSignature', () => {
    it('should add signature to Pine Script code', async () => {
      const code = '//@version=6\nstrategy("Test Strategy", overlay=true)';
      const context: GenerationContext = {
        type: 'template',
        strategyName: 'Test Strategy',
        timestamp: new Date('2024-01-01T00:00:00Z'),
        version: '1.0'
      };

      const result = await signatureService.addSignature(code, context);

      expect(result).toContain('Pine Genie');
      expect(result).toContain('Test Strategy');
      expect(result).toContain('2024-01-01T00:00:00.000Z');
      expect(result).toContain(code);
    });

    it('should handle different signature types', async () => {
      const code = '//@version=6\nstrategy("Builder Strategy", overlay=true)';
      const context: GenerationContext = {
        type: 'builder',
        strategyName: 'Builder Strategy',
        timestamp: new Date('2024-01-01T00:00:00Z'),
        version: '1.0',
        metadata: { nodeCount: 5 }
      };

      const result = await signatureService.addSignature(code, context);

      expect(result).toContain('Visual Builder');
      expect(result).toContain('Nodes: 5');
      expect(result).toContain('Builder Strategy');
    });

    it('should handle AI chat signature type', async () => {
      const code = '//@version=6\nstrategy("AI Strategy", overlay=true)';
      const context: GenerationContext = {
        type: 'ai-chat',
        strategyName: 'AI Strategy',
        timestamp: new Date('2024-01-01T00:00:00Z'),
        version: '1.0'
      };

      const result = await signatureService.addSignature(code, context);

      expect(result).toContain('AI Assistant');
      expect(result).toContain('AI Strategy');
    });
  });

  describe('getSignatureTemplate', () => {
    it('should retrieve template signature template', async () => {
      const template = await signatureService.getSignatureTemplate(SignatureType.TEMPLATE);

      expect(template).toBeDefined();
      expect(template.type).toBe(SignatureType.TEMPLATE);
      expect(template.template).toContain('Template System');
    });

    it('should retrieve builder signature template', async () => {
      const template = await signatureService.getSignatureTemplate(SignatureType.BUILDER);

      expect(template).toBeDefined();
      expect(template.type).toBe(SignatureType.BUILDER);
      expect(template.template).toContain('Visual Builder');
    });

    it('should retrieve AI chat signature template', async () => {
      const template = await signatureService.getSignatureTemplate(SignatureType.AI_CHAT);

      expect(template).toBeDefined();
      expect(template.type).toBe(SignatureType.AI_CHAT);
      expect(template.template).toContain('AI Assistant');
    });
  });

  describe('validateSignature', () => {
    it('should validate correct signature format', () => {
      const signature = '// Generated by Pine Genie\n// Test signature';
      const result = signatureService.validateSignature(signature);

      expect(result.isValid).toBe(true);
      expect(result.errors).toHaveLength(0);
    });

    it('should reject signature with non-comment lines', () => {
      const signature = '// Generated by Pine Genie\nstrategy("test")';
      const result = signatureService.validateSignature(signature);

      expect(result.isValid).toBe(false);
      expect(result.errors.length).toBeGreaterThan(0);
      expect(result.errors[0]).toContain('must be comments');
    });

    it('should reject empty signature', () => {
      const signature = '';
      const result = signatureService.validateSignature(signature);

      expect(result.isValid).toBe(false);
      expect(result.errors).toContain('Signature cannot be empty');
    });

    it('should warn about very long lines', () => {
      const longLine = '// ' + 'x'.repeat(600);
      const result = signatureService.validateSignature(longLine);

      expect(result.warnings.length).toBeGreaterThan(0);
      expect(result.warnings[0]).toContain('very long');
    });
  });
});