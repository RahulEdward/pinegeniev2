'use client';

import React, { useState } from 'react';
import { StrategyPreview as StrategyPreviewType } from '../../types/chat-types';
import { 
  Download, 
  Share2, 
  Copy, 
  FileText, 
  Code, 
  Image,
  Link,
  CheckCircle,
  AlertTriangle,
  X,
  ExternalLink,
  Mail,
  MessageCircle
} from 'lucide-react';

interface StrategyExporterProps {
  strategy: StrategyPreviewType;
  onClose?: () => void;
  className?: string;
}

interface ExportFormat {
  id: string;
  name: string;
  description: string;
  icon: React.ReactNode;
  fileExtension: string;
  mimeType: string;
}

interface ShareOption {
  id: string;
  name: string;
  description: string;
  icon: React.ReactNode;
  action: () => void;
}

/**
 * Strategy export and sharing component
 * Provides multiple export formats and sharing options for AI-generated strategies
 */
export const StrategyExporter: React.FC<StrategyExporterProps> = ({
  strategy,
  onClose,
  className = ''
}) => {
  const [activeTab, setActiveTab] = useState<'export' | 'share'>('export');
  const [exportStatus, setExportStatus] = useState<'idle' | 'exporting' | 'success' | 'error'>('idle');
  const [shareStatus, setShareStatus] = useState<'idle' | 'sharing' | 'success' | 'error'>('idle');
  const [shareUrl, setShareUrl] = useState<string>('');

  // Export formats
  const exportFormats: ExportFormat[] = [
    {
      id: 'pinescript',
      name: 'Pine Script v6',
      description: 'TradingView Pine Script code file',
      icon: <Code size={20} />,
      fileExtension: 'pine',
      mimeType: 'text/plain'
    },
    {
      id: 'json',
      name: 'Strategy JSON',
      description: 'Complete strategy configuration',
      icon: <FileText size={20} />,
      fileExtension: 'json',
      mimeType: 'application/json'
    },
    {
      id: 'markdown',
      name: 'Documentation',
      description: 'Strategy documentation in Markdown',
      icon: <FileText size={20} />,
      fileExtension: 'md',
      mimeType: 'text/markdown'
    },
    {
      id: 'image',
      name: 'Strategy Diagram',
      description: 'Visual representation as PNG',
      icon: <Image size={20} alt="" />,
      fileExtension: 'png',
      mimeType: 'image/png'
    }
  ];

  // Generate export content based on format
  const generateExportContent = (format: ExportFormat): string => {
    switch (format.id) {
      case 'pinescript':
        return generatePineScript();
      case 'json':
        return JSON.stringify(strategy, null, 2);
      case 'markdown':
        return generateMarkdownDoc();
      case 'image':
        return ''; // Would generate image data
      default:
        return '';
    }
  };

  // Generate Pine Script code
  const generatePineScript = (): string => {
    return `//@version=6
strategy("${strategy.name}", overlay=true)

// Strategy Description: ${strategy.description}
// Generated by PineGenie AI
// Complexity: ${strategy.estimatedComplexity}
// Risk Level: ${strategy.riskLevel}

// Strategy Components:
${strategy.components.map(comp => `// - ${comp.label}: ${comp.description}`).join('\n')}

// Input Parameters
// TODO: Add specific parameters based on components

// Strategy Logic
// TODO: Implement strategy logic based on components

// Risk Management
// TODO: Add risk management rules

// Alerts
// TODO: Add alert conditions

// Plot signals on chart
// TODO: Add visual indicators
`;
  };

  // Generate Markdown documentation
  const generateMarkdownDoc = (): string => {
    return `# ${strategy.name}

## Description
${strategy.description}

## Strategy Details
- **Complexity**: ${strategy.estimatedComplexity}
- **Risk Level**: ${strategy.riskLevel}
- **Estimated Build Time**: ${Math.floor(strategy.estimatedTime / 60)}m ${strategy.estimatedTime % 60}s
- **Components**: ${strategy.components.length}

## Components

${strategy.components.map((comp, index) => `
### ${index + 1}. ${comp.label}
- **Type**: ${comp.type}
- **Essential**: ${comp.essential ? 'Yes' : 'No'}
- **Description**: ${comp.description}
`).join('')}

## Usage Instructions
1. Import this strategy into TradingView
2. Configure the parameters according to your risk tolerance
3. Test on historical data before live trading
4. Monitor performance and adjust as needed

## Risk Warning
This strategy is generated by AI and should be thoroughly tested before use with real money. Past performance does not guarantee future results.

---
*Generated by PineGenie AI*
`;
  };

  // Handle export
  const handleExport = async (format: ExportFormat) => {
    setExportStatus('exporting');
    
    try {
      const content = generateExportContent(format);
      const filename = `${strategy.name.replace(/[^a-zA-Z0-9]/g, '_')}.${format.fileExtension}`;
      
      // Create and download file
      const blob = new Blob([content], { type: format.mimeType });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = filename;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
      
      setExportStatus('success');
      setTimeout(() => setExportStatus('idle'), 2000);
    } catch (error) {
      console.error('Export failed:', error);
      setExportStatus('error');
      setTimeout(() => setExportStatus('idle'), 2000);
    }
  };

  // Generate shareable URL
  const generateShareUrl = (): string => {
    const baseUrl = window.location.origin;
    const strategyData = encodeURIComponent(JSON.stringify({
      id: strategy.id,
      name: strategy.name,
      description: strategy.description,
      components: strategy.components.length,
      complexity: strategy.estimatedComplexity,
      risk: strategy.riskLevel
    }));
    return `${baseUrl}/shared-strategy?data=${strategyData}`;
  };

  // Share options
  const shareOptions: ShareOption[] = [
    {
      id: 'copy-link',
      name: 'Copy Link',
      description: 'Copy shareable link to clipboard',
      icon: <Link size={20} />,
      action: async () => {
        const url = generateShareUrl();
        await navigator.clipboard.writeText(url);
        setShareUrl(url);
        setShareStatus('success');
        setTimeout(() => setShareStatus('idle'), 2000);
      }
    },
    {
      id: 'email',
      name: 'Share via Email',
      description: 'Open email client with strategy details',
      icon: <Mail size={20} />,
      action: () => {
        const subject = encodeURIComponent(`Check out this trading strategy: ${strategy.name}`);
        const body = encodeURIComponent(`I created this trading strategy using PineGenie AI:

${strategy.name}
${strategy.description}

Complexity: ${strategy.estimatedComplexity}
Risk Level: ${strategy.riskLevel}
Components: ${strategy.components.length}

View it here: ${generateShareUrl()}`);
        window.open(`mailto:?subject=${subject}&body=${body}`);
      }
    },
    {
      id: 'social',
      name: 'Share on Social',
      description: 'Share on Twitter, LinkedIn, etc.',
      icon: <MessageCircle size={20} />,
      action: () => {
        const text = encodeURIComponent(`Just created a ${strategy.estimatedComplexity} complexity trading strategy "${strategy.name}" using PineGenie AI! ðŸ“ˆ #TradingView #PineScript #AI`);
        const url = encodeURIComponent(generateShareUrl());
        window.open(`https://twitter.com/intent/tweet?text=${text}&url=${url}`);
      }
    }
  ];

  return (
    <div className={`strategy-exporter ${className}`}>
      {/* Header */}
      <div className="exporter-header">
        <div className="header-info">
          <h3 className="exporter-title">
            <Share2 size={20} />
            Export & Share: {strategy.name}
          </h3>
          <p className="exporter-description">
            Download your strategy or share it with others
          </p>
        </div>
        {onClose && (
          <button className="close-btn" onClick={onClose} title="Close exporter">
            <X size={20} />
          </button>
        )}
      </div>

      {/* Tabs */}
      <div className="exporter-tabs">
        <button
          className={`tab ${activeTab === 'export' ? 'active' : ''}`}
          onClick={() => setActiveTab('export')}
        >
          <Download size={16} />
          <span>Export</span>
        </button>
        <button
          className={`tab ${activeTab === 'share' ? 'active' : ''}`}
          onClick={() => setActiveTab('share')}
        >
          <Share2 size={16} />
          <span>Share</span>
        </button>
      </div>

      {/* Content */}
      <div className="exporter-content">
        {/* Export Tab */}
        {activeTab === 'export' && (
          <div className="export-section">
            <div className="section-header">
              <h4>Choose Export Format</h4>
              <p>Download your strategy in various formats</p>
            </div>

            <div className="export-formats">
              {exportFormats.map(format => (
                <div key={format.id} className="format-card">
                  <div className="format-info">
                    <div className="format-icon">
                      {format.icon}
                    </div>
                    <div className="format-details">
                      <h5 className="format-name">{format.name}</h5>
                      <p className="format-description">{format.description}</p>
                      <span className="format-extension">.{format.fileExtension}</span>
                    </div>
                  </div>
                  <button
                    className="export-btn"
                    onClick={() => handleExport(format)}
                    disabled={exportStatus === 'exporting'}
                  >
                    {exportStatus === 'exporting' ? (
                      <div className="loading-spinner" />
                    ) : exportStatus === 'success' ? (
                      <CheckCircle size={16} />
                    ) : exportStatus === 'error' ? (
                      <AlertTriangle size={16} />
                    ) : (
                      <Download size={16} />
                    )}
                    <span>
                      {exportStatus === 'exporting' ? 'Exporting...' : 
                       exportStatus === 'success' ? 'Downloaded!' :
                       exportStatus === 'error' ? 'Failed' : 'Download'}
                    </span>
                  </button>
                </div>
              ))}
            </div>

            {/* Export Status */}
            {exportStatus === 'success' && (
              <div className="status-message success">
                <CheckCircle size={16} />
                <span>Strategy exported successfully!</span>
              </div>
            )}
            {exportStatus === 'error' && (
              <div className="status-message error">
                <AlertTriangle size={16} />
                <span>Export failed. Please try again.</span>
              </div>
            )}
          </div>
        )}

        {/* Share Tab */}
        {activeTab === 'share' && (
          <div className="share-section">
            <div className="section-header">
              <h4>Share Your Strategy</h4>
              <p>Share your strategy with the community or colleagues</p>
            </div>

            <div className="share-options">
              {shareOptions.map(option => (
                <div key={option.id} className="share-card">
                  <div className="share-info">
                    <div className="share-icon">
                      {option.icon}
                    </div>
                    <div className="share-details">
                      <h5 className="share-name">{option.name}</h5>
                      <p className="share-description">{option.description}</p>
                    </div>
                  </div>
                  <button
                    className="share-btn"
                    onClick={option.action}
                    disabled={shareStatus === 'sharing'}
                  >
                    {shareStatus === 'sharing' ? (
                      <div className="loading-spinner" />
                    ) : shareStatus === 'success' && option.id === 'copy-link' ? (
                      <CheckCircle size={16} />
                    ) : (
                      <ExternalLink size={16} />
                    )}
                    <span>
                      {shareStatus === 'sharing' ? 'Sharing...' : 
                       shareStatus === 'success' && option.id === 'copy-link' ? 'Copied!' : 'Share'}
                    </span>
                  </button>
                </div>
              ))}
            </div>

            {/* Share URL Display */}
            {shareUrl && (
              <div className="share-url">
                <label>Shareable Link:</label>
                <div className="url-display">
                  <input
                    type="text"
                    value={shareUrl}
                    readOnly
                    onClick={(e) => e.currentTarget.select()}
                  />
                  <button
                    className="copy-btn"
                    onClick={() => navigator.clipboard.writeText(shareUrl)}
                    title="Copy to clipboard"
                  >
                    <Copy size={16} />
                  </button>
                </div>
              </div>
            )}

            {/* Share Status */}
            {shareStatus === 'success' && (
              <div className="status-message success">
                <CheckCircle size={16} />
                <span>Link copied to clipboard!</span>
              </div>
            )}
          </div>
        )}
      </div>

      {/* Strategy Preview */}
      <div className="strategy-preview-summary">
        <h5>Strategy Summary</h5>
        <div className="summary-grid">
          <div className="summary-item">
            <span className="summary-label">Components</span>
            <span className="summary-value">{strategy.components.length}</span>
          </div>
          <div className="summary-item">
            <span className="summary-label">Complexity</span>
            <span className="summary-value">{strategy.estimatedComplexity}</span>
          </div>
          <div className="summary-item">
            <span className="summary-label">Risk Level</span>
            <span className="summary-value">{strategy.riskLevel}</span>
          </div>
          <div className="summary-item">
            <span className="summary-label">Build Time</span>
            <span className="summary-value">
              {Math.floor(strategy.estimatedTime / 60)}m {strategy.estimatedTime % 60}s
            </span>
          </div>
        </div>
      </div>

      <style jsx>{`
        .strategy-exporter {
          background: var(--bg-primary, #ffffff);
          border: 1px solid var(--border-color, #e5e7eb);
          border-radius: 12px;
          padding: 20px;
          margin-top: 16px;
          animation: slideIn 0.3s ease-out;
        }

        @keyframes slideIn {
          from {
            opacity: 0;
            transform: translateY(10px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }

        .exporter-header {
          display: flex;
          justify-content: space-between;
          align-items: flex-start;
          margin-bottom: 20px;
          padding-bottom: 16px;
          border-bottom: 1px solid var(--border-color, #e5e7eb);
        }

        .header-info {
          flex: 1;
        }

        .exporter-title {
          display: flex;
          align-items: center;
          gap: 8px;
          margin: 0 0 8px 0;
          font-size: 18px;
          font-weight: 600;
          color: var(--text-primary, #111827);
        }

        .exporter-description {
          margin: 0;
          font-size: 14px;
          color: var(--text-secondary, #6b7280);
        }

        .close-btn {
          display: flex;
          align-items: center;
          justify-content: center;
          width: 32px;
          height: 32px;
          border: none;
          background: var(--bg-secondary, #f9fafb);
          border-radius: 6px;
          color: var(--text-secondary, #6b7280);
          cursor: pointer;
          transition: all 0.2s ease;
        }

        .close-btn:hover {
          background: var(--bg-hover, #f3f4f6);
          color: var(--text-primary, #111827);
        }

        .exporter-tabs {
          display: flex;
          gap: 4px;
          margin-bottom: 20px;
          background: var(--bg-secondary, #f9fafb);
          border-radius: 8px;
          padding: 4px;
        }

        .tab {
          display: flex;
          align-items: center;
          gap: 6px;
          padding: 8px 16px;
          border: none;
          background: transparent;
          border-radius: 6px;
          color: var(--text-secondary, #6b7280);
          font-size: 14px;
          font-weight: 500;
          cursor: pointer;
          transition: all 0.2s ease;
          flex: 1;
          justify-content: center;
        }

        .tab:hover {
          background: var(--bg-hover, #f3f4f6);
          color: var(--text-primary, #111827);
        }

        .tab.active {
          background: var(--bg-primary, #ffffff);
          color: var(--primary-color, #3b82f6);
          box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .exporter-content {
          margin-bottom: 20px;
        }

        .section-header {
          margin-bottom: 20px;
        }

        .section-header h4 {
          margin: 0 0 4px 0;
          font-size: 16px;
          font-weight: 600;
          color: var(--text-primary, #111827);
        }

        .section-header p {
          margin: 0;
          font-size: 14px;
          color: var(--text-secondary, #6b7280);
        }

        .export-formats,
        .share-options {
          display: flex;
          flex-direction: column;
          gap: 12px;
        }

        .format-card,
        .share-card {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 16px;
          background: var(--bg-secondary, #f9fafb);
          border: 1px solid var(--border-color, #e5e7eb);
          border-radius: 8px;
          transition: all 0.2s ease;
        }

        .format-card:hover,
        .share-card:hover {
          border-color: var(--primary-color, #3b82f6);
          background: var(--primary-bg, #eff6ff);
        }

        .format-info,
        .share-info {
          display: flex;
          align-items: center;
          gap: 12px;
          flex: 1;
        }

        .format-icon,
        .share-icon {
          width: 40px;
          height: 40px;
          background: var(--bg-primary, #ffffff);
          border-radius: 8px;
          display: flex;
          align-items: center;
          justify-content: center;
          color: var(--primary-color, #3b82f6);
          border: 1px solid var(--border-color, #e5e7eb);
        }

        .format-details,
        .share-details {
          flex: 1;
        }

        .format-name,
        .share-name {
          margin: 0 0 4px 0;
          font-size: 15px;
          font-weight: 600;
          color: var(--text-primary, #111827);
        }

        .format-description,
        .share-description {
          margin: 0 0 4px 0;
          font-size: 13px;
          color: var(--text-secondary, #6b7280);
          line-height: 1.4;
        }

        .format-extension {
          display: inline-block;
          padding: 2px 6px;
          background: var(--primary-color, #3b82f6);
          color: white;
          border-radius: 4px;
          font-size: 11px;
          font-weight: 500;
          text-transform: uppercase;
        }

        .export-btn,
        .share-btn {
          display: flex;
          align-items: center;
          gap: 6px;
          padding: 8px 16px;
          background: var(--primary-color, #3b82f6);
          border: none;
          border-radius: 6px;
          color: white;
          font-size: 13px;
          font-weight: 500;
          cursor: pointer;
          transition: all 0.2s ease;
          min-width: 100px;
          justify-content: center;
        }

        .export-btn:hover:not(:disabled),
        .share-btn:hover:not(:disabled) {
          background: var(--primary-hover, #2563eb);
          transform: translateY(-1px);
          box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
        }

        .export-btn:disabled,
        .share-btn:disabled {
          opacity: 0.7;
          cursor: not-allowed;
          transform: none;
        }

        .loading-spinner {
          width: 16px;
          height: 16px;
          border: 2px solid rgba(255, 255, 255, 0.3);
          border-top: 2px solid white;
          border-radius: 50%;
          animation: spin 1s linear infinite;
        }

        @keyframes spin {
          from { transform: rotate(0deg); }
          to { transform: rotate(360deg); }
        }

        .status-message {
          display: flex;
          align-items: center;
          gap: 8px;
          padding: 12px 16px;
          border-radius: 8px;
          font-size: 14px;
          font-weight: 500;
          margin-top: 16px;
        }

        .status-message.success {
          background: #dcfce7;
          color: #059669;
          border: 1px solid #bbf7d0;
        }

        .status-message.error {
          background: #fef2f2;
          color: #dc2626;
          border: 1px solid #fecaca;
        }

        .share-url {
          margin-top: 20px;
          padding: 16px;
          background: var(--bg-secondary, #f9fafb);
          border-radius: 8px;
        }

        .share-url label {
          display: block;
          margin-bottom: 8px;
          font-size: 13px;
          font-weight: 600;
          color: var(--text-primary, #111827);
        }

        .url-display {
          display: flex;
          gap: 8px;
        }

        .url-display input {
          flex: 1;
          padding: 8px 12px;
          border: 1px solid var(--border-color, #e5e7eb);
          border-radius: 6px;
          background: var(--bg-primary, #ffffff);
          color: var(--text-primary, #111827);
          font-size: 13px;
          font-family: monospace;
        }

        .copy-btn {
          display: flex;
          align-items: center;
          justify-content: center;
          width: 36px;
          height: 36px;
          border: 1px solid var(--border-color, #e5e7eb);
          background: var(--bg-primary, #ffffff);
          border-radius: 6px;
          color: var(--text-secondary, #6b7280);
          cursor: pointer;
          transition: all 0.2s ease;
        }

        .copy-btn:hover {
          background: var(--bg-hover, #f9fafb);
          color: var(--text-primary, #111827);
          border-color: var(--primary-color, #3b82f6);
        }

        .strategy-preview-summary {
          background: var(--bg-secondary, #f9fafb);
          border-radius: 8px;
          padding: 16px;
          border-top: 1px solid var(--border-color, #e5e7eb);
        }

        .strategy-preview-summary h5 {
          margin: 0 0 12px 0;
          font-size: 14px;
          font-weight: 600;
          color: var(--text-primary, #111827);
        }

        .summary-grid {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
          gap: 12px;
        }

        .summary-item {
          display: flex;
          flex-direction: column;
          align-items: center;
          text-align: center;
        }

        .summary-label {
          font-size: 11px;
          color: var(--text-secondary, #6b7280);
          font-weight: 500;
          margin-bottom: 4px;
        }

        .summary-value {
          font-size: 13px;
          color: var(--text-primary, #111827);
          font-weight: 600;
        }

        /* Dark mode support */
        @media (prefers-color-scheme: dark) {
          .strategy-exporter {
            --bg-primary: #1f2937;
            --bg-secondary: #374151;
            --bg-hover: #4b5563;
            --primary-bg: #1e3a8a;
            --text-primary: #f9fafb;
            --text-secondary: #d1d5db;
            --border-color: #4b5563;
            --primary-color: #3b82f6;
            --primary-hover: #2563eb;
          }
        }

        /* Mobile responsiveness */
        @media (max-width: 768px) {
          .format-card,
          .share-card {
            flex-direction: column;
            gap: 12px;
            align-items: stretch;
          }
          
          .format-info,
          .share-info {
            justify-content: center;
            text-align: center;
          }
          
          .export-btn,
          .share-btn {
            width: 100%;
          }
          
          .summary-grid {
            grid-template-columns: repeat(2, 1fr);
          }
        }
      `}</style>
    </div>
  );
};